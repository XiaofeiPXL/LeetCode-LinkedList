LeetCode-145-Binary Tree Postorder Traversal
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
         ArrayList<Integer> res = new ArrayList<Integer>();
         Stack<TreeNode> stack = new Stack<TreeNode>();
         TreeNode lastVisit = null;
        
         while(root!=null || !stack.isEmpty()){
             while(root != null){
                 stack.push(root);
                 root = root.left;
             }
             
             root = stack.peek();
             if(root.right==null || root.right==lastVisit)
             {
                 res.add(root.val);
                 stack.pop();
                 lastVisit = root;
                 root = null;
             }else{
                 root = root.right;
             }
         }
         return res;
    }
}

class Solution {
    public void helper(TreeNode root, ArrayList<Integer> res){
        if(root==null){
            return;
        }
        helper(root.left,res);
        helper(root.right,res);
        res.add(root.val);
    }
    public List<Integer> postorderTraversal(TreeNode root) 
    {
         ArrayList<Integer> res = new ArrayList<Integer>();
         if(root==null){
             return res;
         }
         helper(root,res);
         return res;
    }
}